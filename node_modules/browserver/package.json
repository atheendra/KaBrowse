{
  "name": "browserver",
  "version": "0.1.2",
  "description": "෴ A browserver proxy for node.js ෴",
  "main": "browserver.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/jed/browserver-node.git"
  },
  "keywords": [
    "websocket",
    "http",
    "server",
    "browser",
    "webhook"
  ],
  "author": {
    "name": "Jed Schmidt"
  },
  "license": "BSD",
  "dependencies": {
    "browserver-client": "git://github.com/jed/browserver-client.git"
  },
  "devDependencies": {
    "ws": "~0.4.21"
  },
  "scripts": {
    "test": "npm run-script test-phantom",
    "test-phantom": "node test/server.js --headless",
    "test-browser": "node test/server.js"
  },
  "readme": "෴ browserver-node ෴\n======================\n\n[![Build Status](https://secure.travis-ci.org/jed/browserver-node.png?branch=master)](http://travis-ci.org/jed/browserver-node)\n\nThis is a [browserver](http://browserver.org) proxy for [node.js](http://nodejs.org).\n\nUse browserver-node to create servers that act as a two-way proxies between an HTTP server and a WebSocket server, by\n\n- forwarding incoming HTTP requests on to WebSocket connected clients, and back.\n- forwarding incoming WebSocket messages to other HTTP servers, and back.\n\nThis library, along with [browserver-client](https://github.com/jed/browserver-client), is all the code you need to set up your own browserver.\n\nExample\n-------\n\n```javascript\n// http, websocket, and browservers\nvar http   = require(\"http\")\nvar engine = require(\"engine.io\")\nvar brow   = require(\"browserver\")\n\nfunction handler(req, res) {\n  // your usual HTTP server logic\n}\n\n// instantiate http and websocket servers\nvar httpServer = http.createServer(handler)\nvar wsServer   = engine.attach(httpServer)\n\n// pass each to a new browserver...\nvar browServer = new brow.Server\nbrowServer.listen(wsServer)\nbrowServer.listen(httpServer, {hostname: \"*.mydomain.org\"})\n\n// ... and start listening!\nhttpServer.listen(80, function() {\n  // wait for incoming/outgoing browser connections...\n})\n```\n\nInstallation\n------------\n\nbrowserver is available through npm.\n\n`npm install browserver`\n\nAPI\n---\n\n### browserver = new brow.Server\n\nThis creates a new browserver proxy, which works by listening to both a WebSocket-alike server and an HTTP server.\n\n### browserver.listen(webSocketServer, [options])\n\n`webSocketServer` is required, and must be an instance of a WebSocket server (such as [ws](https://github.com/einaros/ws)) or compatible shim (such as [socket.io](https://github.com/learnboost/socket.io), [engine.io](https://github.com/learnboost/engine.io)) that emits socket instances through `connection` events.\n\n`options` is an optional object that can have any of the following properties:\n\n- `authorize`: An optional request method used for authorization of client requests FROM the browser. This method is invoked with the request as the `this` context and a callback as the first argument (`authorize.call(request, callback)`). If this method calls back without an error, the request will be passed on. If this method calls back with an error, a 403 is returned with the error message as the body of the response. By default, browserver will forward-proxy any request from a browser to the greater Internet, so use this method to limit the resources to which browserver clients have access.\n\n### browserver.listen(httpServer, [options])\n\n`httpServer` is required, and can either be an instance of `http.Server`, or a primitive (such as `3572` or `undefined`) to be used as the port on which a new server instance will listen.\n\n`options` is an optional object that can have any of the following properties:\n\n- `hostname` Optional. If specified, must be a string containing one and only one asterisk (`*`), which is replaced with a socket id when a WebSocket connection is established. Note that this means you will need a wildcard CNAME or A record in your DNS settings that resolves to the appropriate domain or IP address. If omitted, CloudFoundry's [*.vcap.me](https://github.com/cloudfoundry/vcap/) domain is used, which resolves all domains/subdomains to `127.0.0.1`.\n\n- `authorize`: An optional request method used for authorization of server requests TO the browser. This method is invoked with the request as the `this` context and a callback as the first argument (`authorize.call(request, callback)`). If this method calls back without an error, the request will be passed on to the browserver client. If this method calls back with an error, a 403 is returned with the error message as the body of the response. By default, browserver will reverse-proxy any request from the greater Internet to a browserver clients, so use this method to authenticate or limit the requests actually sent to which browserver clients.\n\n### browserver.on(\"connection\", function(server){ ... })\n\nThe browserver server proxy emits a `connection` event whenever a browserver client connects. The listener is called with one argument, the browserver server. The server's unique hostname is available at the `hostname` propery.\n\n### browserver.on(\"disconnection\", function(server){ ... })\n\nThe browserver server proxy emits a `disconnection` event whenever a browserver client disconnects. The listener is called with one argument, the disconnected browserver server.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/jed/browserver-node/issues"
  },
  "homepage": "https://github.com/jed/browserver-node",
  "_id": "browserver@0.1.2",
  "dist": {
    "shasum": "c139ee008c37ccf2cabc5a2920a2b94d04796f64"
  },
  "_from": "browserver@",
  "_resolved": "https://registry.npmjs.org/browserver/-/browserver-0.1.2.tgz"
}
